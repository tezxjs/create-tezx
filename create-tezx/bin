#!/usr/bin/env node
import{execSync as B}from"node:child_process";import{mkdirSync as O,writeFileSync as H}from"node:fs";import k,{join as X,resolve as Y}from"node:path";import R from"node:readline";var g=(s,n)=>({version:n,npm:["npm install",s],bun:["bun add",s],yarn:["yarn add",s],pnpm:["pnpm add",s]});var E={content:`
// 1. Initialize OAuth2 client
const client = GitHubOauthClient({
    clientId: process.env.GITHUB_CLIENT_ID,
    clientSecret: process.env.GITHUB_CLIENT_SECRET,
    redirectUri: 'http://localhost:3000/github/callback'
});

// Step 1: Redirect user to GitHub login
app.get('/github', getGithubOAuthURL({
    authClient: client,
}), (ctx) => {
    return ctx.redirect(ctx.state.get('github_oauth_url'));
});

// Step 2: Verify GitHub token and handle user session
app.get('/github/callback', verifyGithubToken({
    authClient: client,
    Callbacks: (ctx) => {
        return {
            session: async (session, user) => {
                console.log('Session:', session);
                console.log('User:', user);
                return session;
            }
        };
    }
}), async (ctx) => {
    return ctx.json({ success: true });
});
    `,files:[{content:`GITHUB_CLIENT_ID = 12323
GITHUB_CLIENT_SECRET=234234
`,path:".env"}],import:["import { GitHubOauthClient, getGithubOAuthURL,  verifyGithubToken } from '@tezx/github-oauth2'; "],package:[g("@tezx/github-oauth2","^1.0.2")]};var I={content:`
// 1. Initialize OAuth2 client
const client = GoogleOauthClient({
  clientId: process.env.GOOGLE_CLIENT_ID,
  clientSecret: process.env.GOOGLE_CLIENT_SECRET,
  redirectUri: 'http://localhost:3000/auth/callback',
});

// 2. Route to start Google login
app.get('/auth/google', getGoogleOAuthURL({
  authClient: client,
  scopes: ['openid','email','profile'],
}), (ctx) => {
  return ctx.redirect(ctx.state.get('google_oauth_url'));
});

// 3. Callback route, verify token and establish session
app.get('/auth/callback', verifyGoogleToken({
  authClient: client,
  onError: (err) => {
    console.error('OAuth Error:', err);
    // handle error or redirect
  },
  onSuccess: (tokens) => {
    console.log('Tokens:', tokens);
  },
  Callbacks: (ctx)=> {
    return {
    signIn: async (user) => {
      // e.g. allow only users from a domain
      return user.email.endsWith('@yourcompany.com');
    },
    jwt: async (token, user) => {
      // attach roles or custom claims
      token.role = user.email_verified ? 'member' : 'guest';
      return token;
    },
    session: async (session, user) => {
      // persist user profile in session
      session.user = {
        id: user.sub,
        email: user.email,
        name: user.name,
        picture: user.picture
      };
      return session;
    }
  }
  }
}), async (ctx) => {
  // Now ctx.session is populated
  return ctx.json({ success: true });
});
    `,files:[{content:`GOOGLE_CLIENT_ID = 12323
GOOGLE_CLIENT_SECRET=234234
`,path:".env"}],import:['import { GoogleOauthClient, getGoogleOAuthURL, verifyGoogleToken } from "@tezx/google-oauth2";'],package:[g("@tezx/google-oauth2","^1.0.8"),g("@googleapis/oauth2","^2.0.1")]};var U=`
<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>TezX WebSocket Demo</title>
        <style>
            * {
                box-sizing: border-box;
            }

            body {
                font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
                background: #f7f9fc;
                padding: 30px;
                color: #333;
            }

            h1 {
                text-align: center;
                color: #444;
                margin-bottom: 30px;
            }

            .container {
                max-width: 600px;
                margin: 0 auto;
                background: #fff;
                border-radius: 10px;
                box-shadow: 0 8px 20px rgba(0, 0, 0, 0.05);
                padding: 20px;
            }

            #messages {
                border: 1px solid #ddd;
                border-radius: 6px;
                padding: 12px;
                height: 250px;
                overflow-y: auto;
                background-color: #fafafa;
                font-size: 14px;
                margin-bottom: 15px;
            }

            #input {
                width: 100%;
                padding: 10px;
                border: 1px solid #ccc;
                border-radius: 6px;
                font-size: 14px;
                margin-bottom: 10px;
            }

            .buttons {
                display: flex;
                gap: 10px;
                justify-content: flex-end;
            }

            button {
                padding: 8px 16px;
                font-size: 14px;
                border: none;
                border-radius: 6px;
                cursor: pointer;
                transition: all 0.2s ease;
            }

            button:hover {
                opacity: 0.9;
            }

            button:active {
                transform: scale(0.97);
            }

            .send-btn {
                background-color: #4caf50;
                color: white;
            }

            .ping-btn {
                background-color: #2196f3;
                color: white;
            }

            .message {
                margin-bottom: 8px;
                padding: 6px 10px;
                border-radius: 4px;
            }

            .message.client {
                background: #e8f5e9;
                color: #2e7d32;
            }

            .message.server {
                background: #e3f2fd;
                color: #1565c0;
            }

            .message.system {
                background: #fff3e0;
                color: #ef6c00;
                font-style: italic;
            }
        </style>
    </head>
    <body>
        <h1>TezX WebSocket Demo</h1>
        <div class="container">
            <div id="messages"></div>
            <input id="input" type="text" placeholder="Type a message..." />
            <div class="buttons">
                <button class="send-btn" onclick="sendMessage()">Send</button>
                <button class="ping-btn" onclick="sendPing()">Ping</button>
            </div>
        </div>

        <script>
            const ws = new WebSocket(\`ws://\${location.host}/ws\`);
            const messages = document.getElementById("messages");
            const input = document.getElementById("input");

            ws.onopen = () => {
                appendMessage("Connected to WebSocket server", "system");
            };

            ws.onmessage = (event) => {
                appendMessage(\`Server: \${event.data}\`, "server");
            };

            ws.onclose = () => {
                appendMessage("Disconnected from WebSocket server", "system");
            };

            ws.onerror = (error) => {
                appendMessage(\`Error: \${error}\`, "system");
            };

            function appendMessage(message, type = "client") {
                const div = document.createElement("div");
                div.textContent = message;
                div.className = \`message \${type}\`;
                messages.appendChild(div);
                messages.scrollTop = messages.scrollHeight;
            }

            function sendMessage() {
                const message = input.value;
                if (message && ws.readyState === WebSocket.OPEN) {
                    ws.send(message);
                    appendMessage(\`Client: \${message}\`, "client");
                    input.value = "";
                }
            }

            function sendPing() {
                if (ws.readyState === WebSocket.OPEN) {
                    ws.send("ping");
                    appendMessage("Client: ping", "client");
                }
            }
        </script>
    </body>
</html>
`,G={content:`
const socket = [];
app.get(
  "/ws",
  upgradeWebSocket(
    (ctx) => {
      return {
        // make sure it is work with nodejs
        open: (ws) => {
            socket.push(ws);
            console.log("WebSocket connected");
            ws.send("\u{1F44B} Welcome to TezX WebSocket!");
        },
        message: (ws, msg) => {
            if (typeof msg === "string" && msg === "ping") {
                ws.send("pong \u{1F3D3}");
            } else if (msg !== undefined) {
                ws.send("Echo: " + msg);
            }
        },
        close: (ws, data) => {
            console.log(\`WebSocket closed: \${ data?.reason ?? "No reason provided"}\`);
        },
      };
    },
    {
      maxPayload: 2 * 1024 * 1024, // 2MB
      perMessageDeflate: {
        threshold: 1024, // Compress messages > 1KB
      },
    },
  ),
  (ctx) => {
    return ctx.sendFile("public/ws.html");
  },
);
    `,files:[{content:U,path:"public/ws.html"}],import:['import { upgradeWebSocket } from "tezx/ws";']};var S={minimal:{content:"",files:[],import:[],package:[]},ws:G,"github-oauth2":E,"google-oauth2":I};import D from"node:readline";async function C(s,n,t){return new Promise(r=>{let o=0;D.emitKeypressEvents(process.stdin,s),process.stdin.isTTY&&process.stdin.setRawMode(!0);let a=()=>{process.stdout.write("\x1B[2J\x1B[0f"),console.log(n+` (Use \u2191 \u2193 arrows, Enter to confirm)
`),t.forEach((l,i)=>{console.log(`${i===o?"\u{1F449}":"  "} ${i===o?"\x1B[36m":"\x1B[0m"}${l}\x1B[0m`)})},c=(l,i)=>{if(i.name==="up")o=(o-1+t.length)%t.length,a();else if(i.name==="down")o=(o+1)%t.length,a();else if(i.name==="return")return r(t[o])};a(),process.stdin.on("keypress",c)})}var N={reset:"\x1B[0m",bold:"\x1B[1m",underline:"\x1B[4m",gray:"\x1B[90m",white:"\x1B[97m",black:"\x1B[30m",red:"\x1B[31m",green:"\x1B[32m",yellow:"\x1B[33m",blue:"\x1B[34m",magenta:"\x1B[35m",cyan:"\x1B[36m",bgRed:"\x1B[41m",bgGreen:"\x1B[42m",bgYellow:"\x1B[43m",bgBlue:"\x1B[44m",bgMagenta:"\x1B[45m",bgCyan:"\x1B[46m",bgWhite:"\x1B[47m",orange:"\x1B[38;2;255;88;30m",bgOrange:"\x1B[48;2;255;88;30m"};function e(s,n){return`${N[n]}${s}${N.reset}`}import{mkdirSync as F,writeFileSync as j}from"node:fs";import{join as T}from"node:path";var L=({ts:s,template:n,root:t,env:r,useStatic:o=!1,staticFolder:a})=>{let c=T(t,s?"src/index.ts":"src/index.js");F(T(t,"src"),{recursive:!0});let l=`
import { TezX } from "tezx";
import { ${r}Adapter ,loadEnv} from "tezx/${r}";
import { logger } from "tezx/middleware";
${n?.import?.join(`
`)}
const app = new TezX({
    env: loadEnv(),
    debugMode: true,
    // Additional options
});
app.use([logger()]);

app.get("/", (ctx) => ctx.text("Hello from TezX (${r})"));

${o?`app.static("${a||"public"}");`:""}
${n?.content?`
${n?.content?.trim()}
`:""}
${r}Adapter(app).listen(3000, () => {
  console.log("\u{1F680} TezX running on http://localhost:3000");
});
`;if(s){let i=`
{
  "compilerOptions": {
    "outDir": "./dist",
    "module": "CommonJS",
    "target": "ESNext",
    "moduleResolution": "node",
    "skipLibCheck": true,
    "removeComments": false,
    "esModuleInterop": true,
    "resolveJsonModule": true,
    "strict": true,
  },
  "include": [
    "src",
  ],
  "exclude": [
    "node_modules",
    "dist",
    "tests"
  ]
}
  `.trim();j(T(t,"tsconfig.json"),i)}j(c,l.trim())},M=({template:s,root:n,projectName:t,env:r,ts:o,useWS:a,choiceStep:c})=>{let l=[];Array.isArray(s?.package)&&s?.package?.forEach(d=>{let{version:x,npm:h}=d||{};l.push(`"${h?.[1]}": "${x}"`)});let i={bun:{start:"bun dist/index.js",dev:"bun run --hot --watch src/index.ts"},deno:{start:"deno run --allow-all dist/index.js",dev:"deno run --watch --allow-all --unstable-sloppy-imports src/index.ts"},node:{start:"node dist/index.js",dev:"tsx watch src/index.ts"}},p=`
{
  "name": "${t||"tezx-app-example"}",
  "version": "1.0.0",
  "type": "module",
  "description": "TezX is a high-performance, lightweight JavaScript framework designed for speed, scalability, and flexibility. It enables efficient routing, middleware management, and static file serving with minimal configuration. Fully compatible with Node.js, Deno, and Bun.",
  "scripts": { ${o?`
    "build:esm": "tsc --module ESNext --outDir dist --removeComments",
    "build:dts": "tsc --module ESNext --outDir dist --declaration --emitDeclarationOnly",
    "build": "${c?.build}",`:""}
    "start": "${i?.[r]?.start}",
    "dev": "${i?.[r]?.dev}"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/tezxjs/tezx-app-example"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/tezxjs/tezx-app-example"
  },
  "homepage": "https://github.com/tezxjs/tezx-app-example",
  "dependencies": {
    ${o?'"typescript": "^5.8.2",':""}
    "tezx": "^2.0.3"${r=="node"?`,
    "tsx": "^4.19.2"`:""}${a&&r=="node"?`,
    "ws": "^8.18.1"`:""}${l.length?`,
    ${l?.join(`,
`)}`:""}
  },
  "devDependencies": {
    "@types/node": "^22.13.14"
  }
}`.trim();j(T(n,"package.json"),p)};var y=["npm","bun","yarn","pnpm"],f=["node","bun","deno"];function J(s){let n=0,t=["\u280B","\u2819","\u2839","\u2838","\u283C","\u2834","\u2826","\u2827","\u2807","\u280F"],r=setInterval(()=>{process.stdout.write(`\r${t[n=++n%t.length]} ${s}`)},80);return()=>{clearInterval(r),process.stdout.write(`\r\u2705 Done!                             
`)}}var $=R.createInterface({input:process.stdin,output:process.stdout});R.emitKeypressEvents(process.stdin);process.stdin.isTTY&&process.stdin.setRawMode(!0);var b=(s,n="")=>new Promise(t=>{$.question(n?`${s} (${n}): `:s,r=>{t(r.trim()||n)})});async function _(s){let n=s?.directory,t=s?.options;console.log(e(`
\u26A1 TezX App Creator (no dependencies CLI)
`,"orange")),n||(n=await b(e("\u{1F4E6} Project name: ","magenta")),n||(console.log(e("\u274C Project name required.","red")),process.exit(0)));let r=k.basename(n),o=Y(process.cwd(),n),a=!!t?.ts,c=t?.env||t?.runtime,l=f?.includes(c)?c:await C($,"\u{1F4BB} Runtime?",f),i=t?.staticFolder||"public",p=!0,d={content:"",import:[],files:[]};if(t?.t||t?.template){let m=t.t||t.template,v=S?.[m];v||(console.error(`\u274C Unknown template: "${m}"`),console.error(`\u2139\uFE0F Available templates: ${Object.keys(S).join(", ")}`),process.exit(0)),d=v}else a=!!(t?.ts||(await b("\u{1F7E6} Use TypeScript? (y/N): ")).toLowerCase()==="y"),p=!!t?.useStatic||(await b("\u{1F4C1} Use static folder? (y/N): ")).toLowerCase()==="y",i=p?t?.staticFolder||await b("\u{1F4C2} Static folder name? (default: public): "):"";let x=t?.pm||t?.p,h=y?.includes(x)?x:await C($,"\u{1F4E6} Choose your package manager",y),w=t?.i==="true"||t?.install==="true"||(await b("\u{1F4E5} Install dependencies now? (y/N): ")).toLowerCase()==="y";console.log(`
\u{1F4C1} Creating project: ${r}...
`);let W=J("Creating Project");if(O(o,{recursive:!0}),p){let m=X(o,i||"public");O(m,{recursive:!0})}let u={bun:{cd:"cd "+n,install:"bun install",dev:"bun dev",build:"bun build:cjs && bun build:esm && bun build:dts"},npm:{cd:"cd "+n,install:"npm install",dev:"npm run dev",build:"npm run build:cjs && npm run build:esm && npm run build:dts"},yarn:{cd:"cd "+n,install:"yarn",dev:"yarn dev",build:"yarn build:cjs && yarn build:esm && yarn build:dts"},pnpm:{cd:"cd "+n,install:"pnpm install",dev:"pnpm run dev",build:"pnpm run build:cjs && pnpm run build:esm && pnpm run build:dts"}}[h];L({template:d,root:o,ts:!!a,env:l,staticFolder:i,useStatic:p}),M({projectName:r,env:l,root:o,ts:!!a,template:d,choiceStep:u}),$.close(),d?.files?.forEach(m=>{let v=k.join(o,k.dirname(m?.path));O(v,{recursive:!0}),H(k.join(o,m?.path),m?.content)}),w&&B(u?.install,{cwd:o,stdio:"inherit"}),console.log(e(`
\u2705 TezX project "${r}" is ready!
`,"green")),console.log(e("\u{1F9F0} Summary of your configuration:","cyan")),console.log(`\u{1F4C1} Project Name: ${e(r,"yellow")}`);let z=t?.t||t?.template;z&&console.log(`\u{1F4C1} Template Name: ${e(z,"orange")}`),console.log(`\u{1F7E6} TypeScript: ${e(a?"Yes":"No",a?"green":"gray")}`),console.log(`\u{1F4BB} Runtime: ${e(l,"blue")}`),console.log(`\u{1F4C1} Static Folder: ${e(p?i||"public":"Not Used",p?"green":"gray")}`),console.log(`\u{1F4E6} Package Manager: ${e(h,"magenta")}`),console.log(`\u{1F4E5} Dependencies Installed: ${e(w?"Yes":"No",w?"green":"red")}
`),console.log(e("\u{1F449} Next Steps:","cyan")),console.log(e(`   ${u?.cd}`,"white")),w||console.log(e(`   ${u?.install}`,"white")),console.log(e(`   ${u?.dev}`,"white")),console.log(""),W(),process.exit(0)}function A(){console.log(`
        ${e("\u256D\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256E","gray")}
        ${e("\u2502","gray")}     ${e("\u26A1 Create TezX","yellow")} - Scaffold your next backend app     ${e("\u2502","gray")}
        ${e("\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256F","gray")}
        
        ${e("\u{1F4E6} Usage:","cyan")} 
          ${e("create-tezx","green")} ${e("[directory] [...options]","gray")}
        
        ${e("\u{1F680} Quick Start:","cyan")}
          ${e("npm","magenta")} create tezx@latest
          ${e("yarn","magenta")} create tezx
          ${e("pnpm","magenta")} create tezx@latest
          ${e("bun","magenta")} create tezx@latest
          ${e("deno","magenta")} run -A npm:create-tezx@latest
        
        ${e("\u{1F39B}\uFE0F  Options:","cyan")}
        
          ${e("-t, --template <name>","green")}    Use a specific starter template
          ${e("--ts, -ts","green")}                Enable TypeScript setup
          ${e("--env, --runtime <env>","green")}   Set runtime: node | bun | deno
          ${e("-p, --pm <manager>","green")}       Package manager: npm | bun | yarn | pnpm
          ${e("-i, --install","green")}            Automatically install dependencies
          ${e("-y, --yes","green")}                Skip prompts using default options
          ${e("-v, --version","green")}            Show CLI version
          ${e("-h, --help","green")}               Display this help message
        
        ${e("\u{1F9F0} Examples:","cyan")}
          ${e("npm create tezx@latest my-app --template ws --ts --env node","gray")}
          ${e("bun create tezx@latest -- --install --pm bun","gray")}
        
        ${e("\u{1F4C1} Available Templates:","cyan")}
          ${e("minimal","yellow")}         Minimal TypeScript setup
          ${e("ws","yellow")}              Built-in WebSocket server
          ${e("google-oauth2","yellow")}   Google OAuth2 Authentication
          ${e("github-oauth2","yellow")}   GitHub OAuth2 Authentication
        
        ${e("\u{1F517} Repository:","cyan")}
          ${e("https://github.com/tezxjs/tezx","underline")}
        
        ${e("\u{1F9D1}\u200D\u{1F4BB} Author:","cyan")}
          Rakibul Islam ${e("<https://github.com/srakib17>","blue")}`),process.exit(0)}function P(){console.log("TezX CLI v1.0.9"),process.exit(0)}(async()=>{let s=(a,c)=>{c.name==="c"&&c.ctrl&&(process.stdin.off("keypress",s),process.stdin.isTTY&&process.stdin.setRawMode(!1),process.exit(0))};process.stdin.on("keypress",s);let n=process.argv.slice(2),t={},r;for(let a=0;a<n.length;a++){let c=n[a];if(c.startsWith("--")){let l=c.slice(2),i=n[a+1];i&&!i.startsWith("-")?(t[l]=i,a++):t[l]="true"}else if(c.startsWith("-")){let l=c.slice(1),i=n[a+1];i&&!i.startsWith("-")?(t[l]=i,a++):t[l]="true"}else r||(r=c)}let o={directory:r,options:t};if((t.y==="true"||t.yes==="true")&&(o.options.ts="true",o.options.useStatic="true",o.options.staticFolder="public",o.options.pm=y?.includes(o.options?.p||o?.options?.pm)?o.options?.p||o?.options?.pm:"npm",o.options.p=y?.includes(o.options?.p||o?.options?.pm)?o.options?.p||o?.options?.pm:"npm",o.options.env=f?.includes(o.options?.env||o?.options?.runtime)?o.options?.env||o?.options?.runtime:"node",o.options.runtime=f?.includes(o.options?.env||o?.options?.runtime)?o.options?.env||o?.options?.runtime:"node",o.options.install="true"),t.help||t.h){A();return}if(t.v||t.version){P();return}_(o)})();
